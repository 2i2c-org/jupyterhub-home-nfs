apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-nfs-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nfs-server
  template:
    metadata:
      labels:
        app: nfs-server
        # The component label is used by the shared volume free space panel
        # in jupyterhub/grafana-dashboards
        # https://github.com/jupyterhub/grafana-dashboards/blob/18ba92d98cd297951673850a4c92507479ec4ca2/dashboards/jupyterhub.jsonnet#L322
        component: shared-volume-metrics
      annotations:
        {{- if .Values.prometheusExporter.enabled }}
        prometheus.io/scrape: "true"
        prometheus.io/port: "9100"
        {{- end }}
    spec:
      containers:
      - name: nfs-server
        image: "{{ .Values.nfsServer.image.repository }}:{{ .Values.nfsServer.image.tag }}"
        ports:
        - name: nfs
          containerPort: 2049
        - name: mountd
          containerPort: 20048
        - name: rpcbind
          containerPort: 111
        securityContext:
          privileged: true
        volumeMounts:
        - name: home-directories
          mountPath: /export
        resources:
          requests:
            cpu: {{ .Values.nfsServer.cpu.request | default null }}
            memory: {{ .Values.nfsServer.memory.request | default null }}
          limits:
            cpu: {{ .Values.nfsServer.cpu.limit | default null }}
            memory: {{ .Values.nfsServer.memory.limit | default null }}
      - name: enforce-xfs-quota
        image: "{{ .Values.quotaEnforcer.image.repository }}:{{ .Values.quotaEnforcer.image.tag }}"
        command: ["/usr/local/bin/generate.py", "{{ .Values.quotaEnforcer.path }}", "--hard-quota", "{{ .Values.quotaEnforcer.hardQuota }}"]
        securityContext:
          privileged: true
        volumeMounts:
        - name: home-directories
          mountPath: /export
        resources:
          requests:
            cpu: {{ .Values.quotaEnforcer.cpu.request | default null }}
            memory: {{ .Values.quotaEnforcer.memory.request | default null }}
          limits:
            cpu: {{ .Values.quotaEnforcer.cpu.limit | default null }}
            memory: {{ .Values.quotaEnforcer.memory.limit | default null }}
      {{- if .Values.prometheusExporter.enabled }}
      - name: metrics-exporter
        image: "{{ .Values.prometheusExporter.image.repository }}:{{ .Values.prometheusExporter.image.tag }}"
        args:
        # Disable default collectors; we only want filesystem metrics
        - --collector.disable-defaults
        - --collector.filesystem
        # Exclude some patterns of mount points to avoid collecting unnecessary metrics
        - --collector.filesystem.mount-points-exclude=^/(dev|proc|sys|etc|var/run/.+|var/lib/docker/.+|var/lib/kubelet/.+)($|/)
        ports:
        - name: metrics
          containerPort: 9100
        volumeMounts:
        - name: home-directories
          # Mounting under /shared-volume to match path in dashboard definition in jupyterhub/grafana-dashboards
          mountPath: /shared-volume
          readOnly: true
        resources:
          requests:
            cpu: {{ .Values.prometheusExporter.cpu.request | default null }}
            memory: {{ .Values.prometheusExporter.memory.request | default null }}
          limits:
            cpu: {{ .Values.prometheusExporter.cpu.limit | default null }}
            memory: {{ .Values.prometheusExporter.memory.limit | default null }}
      {{- end }}
      volumes:
      - name: home-directories
        persistentVolumeClaim:
          claimName: {{ .Release.Name }}-nfs-home-directories-claim